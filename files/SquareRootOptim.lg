; Return the largest number who square is less than N
erase "getLSquareO
to getLSquareO :n :start
for [i :start :n] [
	if [:i*:i > :n] [
			output :i-1
	]
]
end

getLSquareO 5 1
getLSquareO 8 1
getLSquareO 81 1
getLSquareO 108 1
; getLSquareO 10000000000 1
getLSquareO 10000000000 90000



; 2 inputs:
; N - whose sq root we need to find
; dp - number of decimal places
; Repeatedly:
;   - find x such that x^2 < N < (x+1)^2
;   - if dp = 0 stop. Result = closer to N between x and x+1. Result = Result/(10^dp)
;   - else 
;   -   reduce dp by 1
;   -   N = N * 100, start = x*10
;   -   goto step 1
; Example: N=5, dp=2
;   x = 2, 2^2 < 5 < 3^2
;   dp = 1
;   N=500, start=20
;   x=22
;   dp = 0
;   N=50000, start=220
;   x=223
;   Result=224, Result=224/100=2.24


erase "sqRootO
to sqRootO :n :dp
	local [x start dp1 N1 done]
	make "done "false
	make "start 1
	make "N1 :n
	make "dp1 :dp
	while [:done = "false]  [
		make "x getLSquareO :N1 :start
		if [:dp1 = 0] [
			make "done "true
			ifelse ((:n1 - x*x) < ((x+1)*(x+1) - :n1)) [
				output :x/(power 10 :dp)
			] [
				output (:x+1)/(power 10 :dp)
			]
		]
		make "dp1 :dp1 - 1
		make "N1 :N1*100
		make "start :x*10
	]
end